from abc import abstractmethod, ABC
from typing import Any, Union
from smt_encoding.constraints.function import Function
from smt_encoding.constraints.assertions import AssertHard, AssertSoft


class Solver(ABC):
    """
    Interface that encapsulates the necessary functions a solver must perform
    """

    @abstractmethod
    def set_logic(self, logic: str) -> None:
        pass

    @abstractmethod
    def set_option(self, option: str, value: str) -> None:
        pass

    @abstractmethod
    def declare_sort(self, sort_name: str) -> None:
        pass

    @abstractmethod
    def declare_function(self, *func: Function):
        pass

    @abstractmethod
    def assert_hard(self, *hard_constraints: AssertHard):
        pass

    @abstractmethod
    def assert_soft(self, *soft_constraint: AssertSoft):
        pass

    @abstractmethod
    def check_sat(self) -> None:
        """
        Execute the SMT solver

        :param kwargs: arguments needed for the execution
        :return: no value is returned as a result
        """
        pass

    @abstractmethod
    def get_objectives(self):
        pass

    @abstractmethod
    def get_model(self):
        pass

    @abstractmethod
    def get_value(self, variable: Union[Function, str]) -> Any:
        """
        Returns the model generated by the SMT solver. Note that it is assumed that method execute was called
        beforehand. If not an empty model must be returned

        :return: the stored model by the smt solver
        """
        pass
