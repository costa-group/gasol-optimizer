
/***
    @groupdef ide MiniZincIDE tools

    This library contains features designed for use from within the MiniZinc IDE.
    These are not guaranteed to work when run outside the IDE.
*/

/***
    @groupdef ide.visualisation MiniZincIDE solution visualisation tools

    Functions and variable annotations for visualising solutions.
    This feature is experimental and may not remain backwards compatible.
*/

/** @group ide.visualisation
    Launch a visualisation server using the given \a file. */
test ide_launch_server(string: file) = ide_launch_server(file, "null");

/** @group ide.visualisation 
    Launch a visualisation server using the given \a file.
    The \a user_data argument must be valid JSON (e.g generated by showJSON). */
test ide_launch_server(string: file, string: user_data) = trace_to_section("vis_json",
    json_object([|
        "url", showJSON(file) |
        "userData", user_data
    |]) ++ "\n"
);

/** @group ide.visualisation 
    Add a line graph of \a x with respect to solution time, labelling the trace \a label.
*/
test vis_line(var int: x, string: label) = vis_line([x], [label]);
/** @group ide.visualisation 
    Add a line graph of \a x with respect to solution time, labelling the trace \a label.
*/
test vis_line(var float: x, string: label) = vis_line([x], [label]);

/** @group ide.visualisation 
    Add line graphs of the values in \a x with respect to solution time on the same axes, labelling the series using their index.
*/
test vis_line(array [$$E] of var int: x) = vis_line(x, [show(i) | i in index_set(x)]);
/** @group ide.visualisation 
    Add line graphs of the values in \a x with respect to solution time on the same axes, labelling the series using their index.
*/
test vis_line(array [$$E] of var float: x) = vis_line(x, [show(i) | i in index_set(x)]);

/** @group ide.visualisation 
    Add line graphs of the values in \a x with respect to solution time on the same axes, labelling the series with \a series_labels.
*/
test vis_line(array [$$E] of var int: x, array [$$E] of string: series_labels) =
    ide_launch_server("std/ide/vis_scatter.html", json_object([|
        "type", showJSON("line-time") |
        "seriesLabels", showJSON(series_labels)
    |])) /\
    output_to_section("vis_json", showJSON(x));
/** @group ide.visualisation 
    Add line graphs of the values in \a x with respect to solution time on the same axes, labelling the series with \a series_labels.
*/
test vis_line(array [$$E] of var float: x, array [$$E] of string: series_labels) =
    ide_launch_server("std/ide/vis_scatter.html", json_object([|
        "type", showJSON("line-time") |
        "seriesLabels", showJSON(series_labels)
    |])) /\
    output_to_section("vis_json", showJSON(x));

/** @group ide.visualisation 
    Add a line graph of \a x against \a y, labelling the axes \a x_label and \a y_label respectively. */
test vis_line(array [$$E] of var int: x,
              array [$$E] of var int: y,
              string: x_label,
              string: y_label) =
    ide_launch_server("std/ide/vis_scatter.html", json_object([|
        "type", showJSON("line") |
        "seriesLabels", showJSON([concat(["(", x_label, ",", y_label, ")"])]) |
        "xLabel", showJSON(x_label) |
        "yLabel", showJSON(y_label)
    |])) /\
    output_to_section("vis_json", json_array([json_object([|
        "x", showJSON(x[i]) |
        "y", showJSON(y[i])
    |]) | i in index_set(x)]));
/** @group ide.visualisation 
    Add a line graph of \a x against \a y, labelling the axes \a x_label and \a y_label respectively. */
test vis_line(array [$$E] of var float: x,
              array [$$E] of var float: y,
              string: x_label,
              string: y_label) =
    ide_launch_server("std/ide/vis_scatter.html", json_object([|
        "type", showJSON("line") |
        "seriesLabels", showJSON([concat(["(", x_label, ",", y_label, ")"])]) |
        "xLabel", showJSON(x_label) |
        "yLabel", showJSON(y_label)
    |])) /\
    output_to_section("vis_json", json_array([json_object([|
        "x", showJSON(x[i]) |
        "y", showJSON(y[i])
    |]) | i in index_set(x)]));

/** @group ide.visualisation 
    Add a scatter plot of \a x against \a y, labelling the axes \a x_label and \a y_label respectively. */
test vis_scatter(array [$$E] of var int: x,
                 array [$$E] of var int: y,
                 string: x_label,
                 string: y_label) =
    ide_launch_server("std/ide/vis_scatter.html", json_object([|
        "type", showJSON("scatter") |
        "seriesLabels", showJSON([concat(["(", x_label, ",", y_label, ")"])]) |
        "xLabel", showJSON(x_label) |
        "yLabel", showJSON(y_label)
    |])) /\
    output_to_section("vis_json", json_array([json_object([|
        "x", showJSON(x[i]) |
        "y", showJSON(y[i])
    |]) | i in index_set(x)]));
/** @group ide.visualisation 
    Add a scatter plot of \a x against \a y, labelling the axes \a x_label and \a y_label respectively. */
test vis_scatter(array [$$E] of var float: x,
                 array [$$E] of var float: y,
                 string: x_label,
                 string: y_label) =
    ide_launch_server("std/ide/vis_scatter.html", json_object([|
        "type", showJSON("scatter") |
        "seriesLabels", showJSON([concat(["(", x_label, ",", y_label, ")"])]) |
        "xLabel", showJSON(x_label) |
        "yLabel", showJSON(y_label)
    |])) /\
    output_to_section("vis_json", json_array([json_object([|
        "x", showJSON(x[i]) |
        "y", showJSON(y[i])
    |]) | i in index_set(x)]));

/** @group ide.visualisation 
    Create a scatter-plot visualisation.
    The point (\a x, \a y) is added to the plot for each solution.

    @param x: the x coordinate
    @param y: the y coordinate
    @param x_label: the x-axis label
    @param y_label: the y-axis label
    @param series_label: the series label
 */
test vis_scatter_cumulative(var int: x, var int: y, string: x_label, string: y_label, string: series_label) =
    vis_scatter_cumulative([x], [y], x_label, y_label, [series_label]);
/** @group ide.visualisation 
    Create a scatter-plot visualisation.
    The point (\a x, \a y) is added to the plot for each solution.

    @param x: the x coordinate
    @param y: the y coordinate
    @param x_label: the x-axis label
    @param y_label: the y-axis label
    @param series_label: the series label
 */
test vis_scatter_cumulative(var float: x, var float: y, string: x_label, string: y_label, string: series_label) =
    vis_scatter_cumulative([x], [y], x_label, y_label, [series_label]);

/** @group ide.visualisation 
    Create a scatter-plot visualisation with multiple series.
    The point (\a x[i], \a y[i]) for each series \a i is added to the plot for each solution.
    Series are labelled using the index set of \a x and \a y.

    @param x: the x coordinate for each series
    @param y: the y coordinate for each series
    @param x_label: the x-axis label
    @param y_label: the y-axis label
 */
test vis_scatter_cumulative(array [$$E] of var int: x,
                            array [$$E] of var int: y,
                            string: x_label,
                            string: y_label) = 
    vis_scatter_cumulative(x, y, x_label, y_label, [showJSON(show(i)) | i in index_set(x)]);
/** @group ide.visualisation 
    Create a scatter-plot visualisation with multiple series.
    The point (\a x[i], \a y[i]) for each series \a i is added to the plot for each solution.
    Series are labelled using the index set of \a x and \a y.

    @param x: the x coordinate for each series
    @param y: the y coordinate for each series
    @param x_label: the x-axis label
    @param y_label: the y-axis label
 */
test vis_scatter_cumulative(array [$$E] of var float: x,
                            array [$$E] of var float: y,
                            string: x_label,
                            string: y_label) = 
    vis_scatter_cumulative(x, y, x_label, y_label, [showJSON(show(i)) | i in index_set(x)]);

/** @group ide.visualisation 
    Create a scatter-plot visualisation with multiple series.
    The point (\a x[i], \a y[i]) for each series \a i is added to the plot for each solution.

    @param x: the x coordinate for each series
    @param y: the y coordinate for each series
    @param x_label: the x-axis label
    @param y_label: the y-axis label
    @param series_labels: the label for each series
 */
test vis_scatter_cumulative(array [$$E] of var int: x,
                            array [$$E] of var int: y,
                            string: x_label,
                            string: y_label,
                            array [$$E] of string: series_labels) = 
    ide_launch_server("std/ide/vis_scatter.html", json_object([|
        "type", showJSON("scatter-cumulative") |
        "seriesLabels", showJSON(series_labels) |
        "xLabel", showJSON(x_label) |
        "yLabel", showJSON(y_label)
    |])) /\
    output_to_section("vis_json", json_array([json_object([|
        "x", showJSON(x[i]) |
        "y", showJSON(y[i])
    |]) | i in index_set(x)]));
/** @group ide.visualisation 
    Create a scatter-plot visualisation with multiple series.
    The point (\a x[i], \a y[i]) for each series \a i is added to the plot for each solution.

    @param x: the x coordinate for each series
    @param y: the y coordinate for each series
    @param x_label: the x-axis label
    @param y_label: the y-axis label
    @param series_labels: the label for each series
 */
test vis_scatter_cumulative(array [$$E] of var float: x,
                            array [$$E] of var float: y,
                            string: x_label,
                            string: y_label,
                            array [$$E] of string: series_labels) = 
    ide_launch_server("std/ide/vis_scatter.html", json_object([|
        "type", showJSON("scatter-cumulative") |
        "seriesLabels", showJSON(series_labels) |
        "xLabel", showJSON(x_label) |
        "yLabel", showJSON(y_label)
    |])) /\
    output_to_section("vis_json", json_array([json_object([|
        "x", showJSON(x[i]) |
        "y", showJSON(y[i])
    |]) | i in index_set(x)]));

/** @group ide.visualisation 
    Visualise a bar chart of the values in \a x (labelled by index set)
 */
test vis_bar(array [$$D] of var int: x) =
    vis_bar(x, [i: show(i) | i in index_set(x)]);
/** @group ide.visualisation 
    Visualise a bar chart of the values in \a x (labelled by index set)
 */
test vis_bar(array [$$D] of var float: x) =
    vis_bar(x, [i: show(i) | i in index_set(x)]);

/** @group ide.visualisation 
    Visualise a bar chart of the values in \a x.
    Chart values are labelled with \a data_labels. 
 */
test vis_bar(array [$$D] of var int: x,
             array [$$D] of string: data_labels) =
    ide_launch_server("std/ide/vis_bar.html", json_object([|
        "type", showJSON("bar") |
        "seriesLabels", "null" |
        "dataLabels", showJSON(data_labels)
    |])) /\
    output_to_section("vis_json", showJSON([(1, i): x[i]| i in index_set(x)]));
/** @group ide.visualisation 
    Visualise a bar chart of the values in \a x.
    Chart values are labelled with \a data_labels. 
 */
test vis_bar(array [$$D] of var float: x,
             array [$$D] of string: data_labels) =
    ide_launch_server("std/ide/vis_bar.html", json_object([|
        "type", showJSON("bar") |
        "seriesLabels", "null" |
        "dataLabels", showJSON(data_labels)
    |])) /\
    output_to_section("vis_json", showJSON([(1, i): x[i]| i in index_set(x)]));

/** @group ide.visualisation 
    Visualise a bar chart with grouped data (labelled by index set).
    \a x[\p i, \p j] is the value for \p j in data series \p i.
 */
test vis_bar(array [$$S, $$D] of var int: x) =
    vis_bar(x, [i: show(i) | i in index_set_1of2(x)], [i: show(i) | i in index_set_2of2(x)]);
/** @group ide.visualisation 
    Visualise a bar chart with grouped data (labelled by index set).
    \a x[\p i, \p j] is the value for \p j in data series \p i.
 */
test vis_bar(array [$$S, $$D] of var float: x) =
    vis_bar(x, [i: show(i) | i in index_set_1of2(x)], [i: show(i) | i in index_set_2of2(x)]);

/** @group ide.visualisation 
    Visualise a bar chart with grouped data.
    \a x[\p i, \p j] is the value for \p j in data series \p i.
    Series are labelled with \a series_labels. 
    Chart values are labelled with \a data_labels. 
 */
test vis_bar(array [$$S, $$D] of var int: x,
             array [$$S] of string: series_labels,
             array [$$D] of string: data_labels) =
    ide_launch_server("std/ide/vis_bar.html", json_object([|
        "type", showJSON("bar") |
        "seriesLabels", showJSON(series_labels) |
        "dataLabels", showJSON(data_labels)
    |])) /\
    output_to_section("vis_json", showJSON(x));
/** @group ide.visualisation 
    Visualise a bar chart with grouped data.
    \a x[\p i, \p j] is the value for \p j in data series \p i.
    Series are labelled with \a series_labels. 
    Chart values are labelled with \a data_labels. 
 */
test vis_bar(array [$$S, $$D] of var float: x,
             array [$$S] of string: series_labels,
             array [$$D] of string: data_labels) =
    ide_launch_server("std/ide/vis_bar.html", json_object([|
        "type", showJSON("bar") |
        "seriesLabels", showJSON(series_labels) |
        "dataLabels", showJSON(data_labels)
    |])) /\
    output_to_section("vis_json", showJSON(x));

/** @group ide.visualisation 
    Visualise a column chart of the values in \a x (labelled by index set)
 */
test vis_column(array [$$D] of var int: x) =
    vis_column(x, [i: show(i) | i in index_set(x)]);
/** @group ide.visualisation 
    Visualise a column chart of the values in \a x (labelled by index set)
 */
test vis_column(array [$$D] of var float: x) =
    vis_column(x, [i: show(i) | i in index_set(x)]);

/** @group ide.visualisation 
    Visualise a column chart of the values in \a x.
    Chart values are labelled with \a data_labels. 
 */
test vis_column(array [$$D] of var int: x,
             array [$$D] of string: data_labels) =
    ide_launch_server("std/ide/vis_bar.html", json_object([|
        "type", showJSON("column") |
        "seriesLabels", "null" |
        "dataLabels", showJSON(data_labels)
    |])) /\
    output_to_section("vis_json", showJSON([(1, i): x[i]| i in index_set(x)]));
/** @group ide.visualisation 
    Visualise a column chart of the values in \a x.
    Chart values are labelled with \a data_labels. 
 */
test vis_column(array [$$D] of var float: x,
             array [$$D] of string: data_labels) =
    ide_launch_server("std/ide/vis_bar.html", json_object([|
        "type", showJSON("column") |
        "seriesLabels", "null" |
        "dataLabels", showJSON(data_labels)
    |])) /\
    output_to_section("vis_json", showJSON([(1, i): x[i]| i in index_set(x)]));

/** @group ide.visualisation 
    Visualise a column chart with grouped data (labelled by index set).
    \a x[\p i, \p j] is the value for \p j in data series \p i.
 */
test vis_column(array [$$S, $$D] of var int: x) =
    vis_column(x, [i: show(i) | i in index_set_1of2(x)], [i: show(i) | i in index_set_2of2(x)]);
/** @group ide.visualisation 
    Visualise a column chart with grouped data (labelled by index set).
    \a x[\p i, \p j] is the value for \p j in data series \p i.
 */
test vis_column(array [$$S, $$D] of var float: x) =
    vis_column(x, [i: show(i) | i in index_set_1of2(x)], [i: show(i) | i in index_set_2of2(x)]);

/** @group ide.visualisation 
    Visualise a column chart with grouped data.
    \a x[\p i, \p j] is the value for \p j in data series \p i.
    Series are labelled with \a series_labels. 
    Chart values are labelled with \a data_labels. 
 */
test vis_column(array [$$S, $$D] of var int: x,
             array [$$S] of string: series_labels,
             array [$$D] of string: data_labels) =
    ide_launch_server("std/ide/vis_bar.html", json_object([|
        "type", showJSON("column") |
        "seriesLabels", showJSON(series_labels) |
        "dataLabels", showJSON(data_labels)
    |])) /\
    output_to_section("vis_json", showJSON(x));
/** @group ide.visualisation 
    Visualise a column chart with grouped data.
    \a x[\p i, \p j] is the value for \p j in data series \p i.
    Series are labelled with \a series_labels. 
    Chart values are labelled with \a data_labels. 
 */
test vis_column(array [$$S, $$D] of var float: x,
             array [$$S] of string: series_labels,
             array [$$D] of string: data_labels) =
    ide_launch_server("std/ide/vis_bar.html", json_object([|
        "type", showJSON("column") |
        "seriesLabels", showJSON(series_labels) |
        "dataLabels", showJSON(data_labels)
    |])) /\
    output_to_section("vis_json", showJSON(x));

/** @group ide.visualisation 
    Visualise a Gantt chart of tasks with start times \a start and durations \a dur.
    The tasks are labelled using the index set of \a start.
 */
test vis_gantt(array [$$E] of var int: start, array [$$E] of var int: dur) =
    vis_gantt(start, dur, [i: show(i) | i in index_set(start)]);

/** @group ide.visualisation 
    Visualise a Gantt chart of tasks with start times \a start and durations \a dur.
    The tasks are labelled using \a labels.
 */
test vis_gantt(array [$$E] of var int: start,
               array [$$E] of var int: dur,
               array [$$E] of string: labels) =
    ide_launch_server("std/ide/vis_gantt.html", json_object([|
        "type", showJSON("gantt") |
        "labels", showJSON(labels)
    |])) /\ output_to_section("vis_json", json_object([|
        "start", showJSON(start) |
        "dur", showJSON(dur)
    |]));

/** @group ide.visualisation 
    Visualise a Gantt chart of tasks with start times \a start and durations \a dur.
    The tasks are labelled using \a labels and given the colours \a colors.
 */
test vis_gantt(array [$$E] of var int: start,
               array [$$E] of var int: dur,
               array [$$E] of string: labels,
               array [$$E] of string: colors) =
    ide_launch_server("std/ide/vis_gantt.html", json_object([|
        "type", showJSON("gantt") |
        "labels", showJSON(labels) |
        "colors", showJSON(colors)
    |])) /\ output_to_section("vis_json", json_object([|
        "start", showJSON(start) |
        "dur", showJSON(dur)
    |]));

test vis_graph_internal(bool: directed,
                      bool: highlight,
                      array [$$N] of string: node_labels,
                      array [$$E] of $$N: from,
                      array [$$E] of $$N: to,
                      array [$$E] of string: edge_labels,
                      array [$$N] of var bool: ns,
                      array [$$E] of var bool: es) =
    assert(index_set(from) = index_set(to),"vis_graph: index set of from and to must be identical") /\
    assert(index_set(from) = index_set(es),"vis_graph: index set of from and es must be identical") /\
    assert(index_set(edge_labels) = index_set(es),"vis_graph: index set of edge_labels and es must be identical") /\
    assert(dom_array(from) subset index_set(ns),"vis_graph: nodes in from must be in index set of ns") /\
    assert(dom_array(to) subset index_set(ns),"vis_graph: nodes in to must be in index set of ns") /\
    ide_launch_server("std/ide/vis_network.html", json_object([|
        "type", showJSON(if directed then "digraph" else "graph" endif) |
        "highlight", showJSON(highlight) |
        "nodes", showJSON([show(i) | i in index_set(ns)]) |
        "nodeLabels", showJSON(node_labels) |
        "from", showJSON([show(n) | n in from]) |
        "to", showJSON([show(n) | n in to]) |
        "edgeLabels", showJSON(edge_labels)
    |])) /\
    output_to_section("vis_json", json_object([|
        "ns", showJSON(ns) |
        "es", showJSON(es)
    |]));

/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given undirected graph.
    The nodes are labelled using the index set of \a ns.

    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param edge_labels: labels to use for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_graph(array [$$E] of $$N: from,
               array [$$E] of $$N: to,
               array [$$E] of string: edge_labels,
               array [$$N] of var bool: ns,
               array [$$E] of var bool: es) =
    vis_graph([i: show(i) | i in index_set(ns)], from, to, edge_labels, ns, es);
/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given undirected graph.
    The nodes are labelled using the index set of \a ns and the edges are labelled using the index
    set of \a es.

    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_graph(array [$$E] of $$N: from,
               array [$$E] of $$N: to,
               array [$$N] of var bool: ns,
               array [$$E] of var bool: es) =
    vis_graph([i: show(i) | i in index_set(ns)], from, to, [i: show(i) | i in index_set(es)], ns, es);
/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given undirected graph.

    @param node_labels: the label for each node
    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param edge_labels: labels to use for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_graph(array [$$N] of string: node_labels,
               array [$$E] of $$N: from,
               array [$$E] of $$N: to,
               array [$$E] of string: edge_labels,
               array [$$N] of var bool: ns,
               array [$$E] of var bool: es) =
    vis_graph_internal(false, false, node_labels, from, to, edge_labels, ns, es);

/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given undirected graph.
    The nodes are labelled using the index set of \a ns.
    The entire graph is drawn, with the given subgraph highlighted.

    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param edge_labels: labels to use for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_graph_highlight(array [$$E] of $$N: from,
                         array [$$E] of $$N: to,
                         array [$$E] of string: edge_labels,
                         array [$$N] of var bool: ns,
                         array [$$E] of var bool: es) =
    vis_graph_highlight([i: show(i) | i in index_set(ns)], from, to, edge_labels, ns, es);
/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given undirected graph.
    The nodes are labelled using the index set of \a ns and the edges are labelled using the index
    set of \a es.
    The entire graph is drawn, with the given subgraph highlighted.

    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_graph_highlight(array [$$E] of $$N: from,
                         array [$$E] of $$N: to,
                         array [$$N] of var bool: ns,
                         array [$$E] of var bool: es) =
    vis_graph_highlight([i: show(i) | i in index_set(ns)], from, to, [i: show(i) | i in index_set(es)], ns, es);
/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given undirected graph.
    The entire graph is drawn, with the given subgraph highlighted.

    @param node_labels: the label for each node
    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param edge_labels: labels to use for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_graph_highlight(array [$$N] of string: node_labels,
                         array [$$E] of $$N: from,
                         array [$$E] of $$N: to,
                         array [$$E] of string: edge_labels,
                         array [$$N] of var bool: ns,
                         array [$$E] of var bool: es) =
    vis_graph_internal(false, true, node_labels, from, to, edge_labels, ns, es);

/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given directed graph.
    The nodes are labelled using the index set of a ns.

    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param edge_labels: labels to use for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_digraph(array [$$E] of $$N: from,
                 array [$$E] of $$N: to,
                 array [$$E] of string: edge_labels,
                 array [$$N] of var bool: ns,
                 array [$$E] of var bool: es) =
    vis_digraph([i: show(i) | i in index_set(ns)], from, to, edge_labels, ns, es);
/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given directed graph.
    The nodes are labelled using the index set of \a ns and the edges are labelled using the index
    set of \a es.

    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_digraph(array [$$E] of $$N: from,
                 array [$$E] of $$N: to,
                 array [$$N] of var bool: ns,
                 array [$$E] of var bool: es) =
    vis_digraph([i: show(i) | i in index_set(ns)], from, to, [i: show(i) | i in index_set(es)], ns, es);
/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given directed graph.

    @param node_labels: the label for each node
    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param edge_labels: labels to use for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_digraph(array [$$N] of string: node_labels,
                 array [$$E] of $$N: from,
                 array [$$E] of $$N: to,
                 array [$$E] of string: edge_labels,
                 array [$$N] of var bool: ns,
                 array [$$E] of var bool: es) =
    vis_graph_internal(true, false, node_labels, from, to, edge_labels, ns, es);

/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given directed graph.
    The nodes are labelled using the index set of a ns.
    The entire graph is drawn, with the given subgraph highlighted.

    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param edge_labels: labels to use for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_digraph_highlight(array [$$E] of $$N: from,
                 array [$$E] of $$N: to,
                 array [$$E] of string: edge_labels,
                 array [$$N] of var bool: ns,
                 array [$$E] of var bool: es) =
    vis_digraph_highlight([i: show(i) | i in index_set(ns)], from, to, edge_labels, ns, es);
/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given directed graph.
    The nodes are labelled using the index set of \a ns and the edges are labelled using the index
    set of \a es.
    The entire graph is drawn, with the given subgraph highlighted.

    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_digraph_highlight(array [$$E] of $$N: from,
                           array [$$E] of $$N: to,
                           array [$$N] of var bool: ns,
                           array [$$E] of var bool: es) =
    vis_digraph_highlight([i: show(i) | i in index_set(ns)], from, to, [i: show(i) | i in index_set(es)], ns, es);
/** @group ide.visualisation
    Create a visualisation of the subgraph \a ns and \a es of a given directed graph.
    The entire graph is drawn, with the given subgraph highlighted.

    @param node_labels: the label for each node
    @param from: the leaving node for each edge
    @param to: the entering node for each edge
    @param edge_labels: labels to use for each edge
    @param ns: a Boolean for each node whether it is in the subgraph
    @param es: a Boolean for each edge whether it is in the subgraph
 */
test vis_digraph_highlight(array [$$N] of string: node_labels,
                           array [$$E] of $$N: from,
                           array [$$E] of $$N: to,
                           array [$$E] of string: edge_labels,
                           array [$$N] of var bool: ns,
                           array [$$E] of var bool: es) =
    vis_graph_internal(true, true, node_labels, from, to, edge_labels, ns, es);

/** @group ide.visualisation
    Visualise the positions of 2-dimensional objects which take a particular shape composed of rectangles. 

    @param rect_x: x-position of each rectangle
    @param rect_y: y-position of each rectangle
    @param rect_dx: width of each rectangle
    @param rect_dy: height of each rectangle
    @param shape: the rectangles which comprise each shape
    @param x: the x-position of each object
    @param y: the y-position of each object
    @param kind: which shape each object is 
 */
test vis_geost_2d(array [$$E] of int: rect_x,
                  array [$$E] of int: rect_y,
                  array [$$E] of int: rect_dx,
                  array [$$E] of int: rect_dy,
                  array [$$K] of set of $$E: shape,
                  array [$$T] of var int: x,
                  array [$$T] of var int: y,
                  array [$$T] of var $$K: kind) = 
    ide_launch_server("std/ide/vis_geost.html", json_object([|
        "type", showJSON("geost-2d") |
        "rectIndexSet", showJSON([show(i) | i in index_set(rect_x)]) |
        "rectX", showJSON(rect_x) |
        "rectY", showJSON(rect_y) |
        "rectDx", showJSON(rect_dx) |
        "rectDy", showJSON(rect_dy) |
        "shapeIndexSet", showJSON([show(i) | i in index_set(shape)]) |
        "shape", json_array([showJSON([show(se) | se in s]) | s in shape])
    |])) /\ output_to_section("vis_json", json_object([|
        "x", showJSON(x) |
        "y", showJSON(y) |
        "kind", showJSON([show(k) | k in kind])
    |]));

/** @group ide.visualisation
    Visualise the positions of 2-dimensional objects which take a particular shape composed of rectangles. 

    @param rect_size: the size of each rectangle
    @param rect_offset: the position  of each rectangle
    @param shape: the rectangles which comprise each shape
    @param x: the position of each object
    @param kind: which shape each object is
 */
test vis_geost_2d(array[$$E, 1..2] of int: rect_size,
                  array[$$E, 1..2] of int: rect_offset,
                  array[$$K] of set of $$E: shape,
                  array[$$T, 1..2] of var int: x,
                  array[$$T] of var $$K: kind) =
    vis_geost_2d(
        rect_offset[.., 1],
        rect_offset[.., 2],
        rect_size[.., 1],
        rect_size[.., 2],
        shape,
        x[.., 1],
        x[.., 2],
        kind
    );
